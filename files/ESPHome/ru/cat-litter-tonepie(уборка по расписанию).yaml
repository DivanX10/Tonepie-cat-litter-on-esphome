#В конфигурации используется
#Автоуборка
#Уборка вручную
#Моя автоуборка
#Уборка по расписанию
#Статусы

#####################################################################################
##################################### Переменные ####################################
substitutions:
  board_name: ESP Cat Litter Tonepie
  node_name: cat litter tonepie
  max_skipped_time: "60" #Минуты, в течение которых будем запускать пропущенную кормежку

#####################################################################################
################################ Основная конфигурация ##############################
esphome:
  name: cat-litter-tonepie
  friendly_name: cat-litter-tonepie
  comment: ESP Cat Litter Tonepie
  on_boot:
    priority: 600
    then:
      - delay: 10s
      - script.execute: idStartingScript

#####################################################################################
###################################### Платформа ####################################
esp8266:
  board: esp12e
  framework:
    version: recommended
  restore_from_flash: true #Сохраняем предустановленные настройки. После перезагрузки настройки не сбрасываются

#Сброс данных на флэш-накопитель для уменьшения износа флеш-накопителя
preferences:
  flash_write_interval: 1min

#####################################################################################
################################ Wi-Fi и точка доступа ##############################
#Учетные данные Wi-Fi для подключения платы к домашней сети
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: off
  reboot_timeout: 5min
  id: idWiFi

#Если не будет связи с WiFi, то поднимется точка доступа
  ap:
    ssid: ESP Cat Litter Tonepie
    password: !secret ap_esp_password
    ap_timeout: 1 min
    manual_ip:
      static_ip: 192.168.4.1
      gateway: 192.168.4.1
      subnet: 255.255.255.0

#Компонент mdns заставляет узел объявлять о себе в локальной сети, используя протокол многоадресной рассылки DNS (mDNS), по умолчанию для mDNS disabled: false
mdns:
  disabled: false

#Компонент captive portal в ESPHome является резервным механизмом на случай сбоя подключения к настроенному Wi-Fi
captive_portal:

#Веб сервер
web_server:
  port: 80

#Журналирование
logger:
  level: ERROR
  baud_rate: 0

#Enable Home Assistant API
api:

#Обновление по воздуху (OTA)
ota:
  password: "esphome"


#####################################################################################
######################################### UART ######################################
uart:
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600
  stop_bits: 1
  data_bits: 8
  parity: none
#  debug:
#    direction: BOTH
#    dummy_receiver: false

#Включить компонент Tuya MCU
tuya:


#####################################################################################
########################### Глобальные переменные ###################################
globals:
#Стартовая калибровка лотка после подачи питания или перезагрузки ESP
#  - id: idCalibrationCompleted
#    type: bool
#    restore_value: yes
#    initial_value: 'false'

#Последняя кормежка по расписанию
  - id: idLastCleaningTimes
    type: int
    restore_value: yes
    initial_value: '2147483648'

#Задержка запуска для AutoCleaning
  - id: idLaunchDelayGlobal
    type: int
    restore_value: yes
    initial_value: '2147483648'

#Интервал между уборками для AutoCleaning
  - id: idIntervalBetweenCleaningGlobal
    type: int
    restore_value: yes
    initial_value: '2147483648'

#Чувствительность обнаружения для AutoCleaning
  - id: idDetectionSensitivityGlobal
    type: int
    restore_value: yes
    initial_value: '2147483648'

#Задержка запуска для My AutoCleaning
  - id: idMyLaunchDelayGlobal
    type: int
    restore_value: yes
    initial_value: '2147483648'

#Интервал между уборками для My AutoCleaning
  - id: idMyIntervalBetweenCleaningGlobal
    type: int
    restore_value: yes
    initial_value: '2147483648'

#Чувствительность обнаружения для My AutoCleaning
  - id: idMyDetectionSensitivityGlobal
    type: int
    restore_value: yes
    initial_value: '2147483648'

#Была ли уборка MyAutoCleaning?
  - id: idCleaningLastTimeGlobal
    type: bool
    restore_value: yes
    initial_value: 'false'

#Питомец в лотке. Последнее состояние
  - id: idPetInsideLastSeen
    type: bool
    restore_value: yes
    initial_value: 'false'

#Уборка. Последнее состояние
  - id: idCleaningLastSeen
    type: bool
    restore_value: yes
    initial_value: 'false'

#Ионизатор. Последнее состояние
  - id: idIonizerLastSeen
    type: bool
    restore_value: yes
    initial_value: 'false'

#####################################################################################
################################## Выключатель ######################################
switch:
#Уборка вручную
  - platform: "tuya"
    name: "Manual Cleaning"
    icon: mdi:broom
    id: idManualCleaning
    switch_datapoint: 101
    on_turn_on:
      #Публикуем статус уборки
      - binary_sensor.template.publish:
          id: idCleaning
          state: ON  
    on_turn_off:
      #Публикуем статус уборки
      - binary_sensor.template.publish:
          id: idCleaning
          state: OFF
      #Если была выполнена уборка вручную, то отправляем в глобальную переменную для "Была ли уборка MyAutoCleaning?" статус true
      - globals.set:
          id: idCleaningLastTimeGlobal
          value: 'true'
      #Задержка для интервала между уборками
      - delay: !lambda "return id(idIntervalBetweenCleaning).state*60000;"
      #После задержки отправляем в глобальную переменную для "Была ли уборка MyAutoCleaning?" статус false. Таким образом, если питомец зайдет и выйдет, то запустится следующая уборка
      - globals.set:
         id: idCleaningLastTimeGlobal
         value: 'false'


#Автоуборка. Встроенная логика работы. 
#Мне не нравится как работает встроенная логика работы автоуборки, поэтому я указал выключать ее по умолчанию. По умолчанию будет выключено при загрузке. 
#Если надо, чтобы всегда включалась автоуборка, то нужно убрать строку restore_mode: ALWAYS_OFF
#Если включаем AutoCleaning, то выключается My AutoCleaning
  - platform: "tuya"
    name: "AutoCleaning"
    icon: mdi:auto-mode
    id: idAutoCleaning
    switch_datapoint: 105
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - switch.turn_off: idMyAutoCleaning
      - switch.turn_off: idScheduledCleaning
      - script.execute: idStartingScript
      - script.execute: idCalibrationStartedScript
#      - script.execute: idMySettingScript

#Автоуборка. Своя логика работы автоуборки
#Если включаем My AutoCleaning, то выключается AutoCleaning
  - platform: template
    name: "My AutoCleaning"
    icon: mdi:broom
    id: idMyAutoCleaning
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - switch.turn_off: idAutoCleaning
      - switch.turn_off: idScheduledCleaning
      - script.execute: idSettingsForMyAutoCleaning
    on_turn_off:
      - script.execute: idSettingsForAutoCleaning

#Инфракрасный датчик
  - platform: "tuya"
    name: "Infrared Sensor"
    icon: mdi:eye-outline
    id: idInfraredSensor
    switch_datapoint: 111
    restore_mode: ALWAYS_OFF

#Защита от детей
  - platform: "tuya"
    name: "Protection From Children"
    icon: mdi:lock-check-outline
    id: idProtectionFromChildren
    switch_datapoint: 114

#Ионизатор
  - platform: "tuya"
    name: "Ionizer"
    icon: mdi:creation
    id: idIonizer
    switch_datapoint: 120
    #Выполняем действия при включении ионизатора
    on_turn_on:
      #Калибровка не выполнена
      - if:
          condition:
            #Условие: калибровка не выполнена
            - lambda: 'return id(idCalibrationCompleted).state == false;'
          then:
            - if:
                condition:
                  #Условие: Ионизатор включен, питомца в лотке нет, уборка не выполняется
                  - lambda: 'return id(idIonizer).state == true and id(idPetInside).state == false and id(idCleaning).state == false;'
                then:
                  #Включаем выключаетль "Калибровка выполнена"
                  - switch.turn_on: idCalibrationCompleted
                  #Публикуем в текстовый сенсор статус "Калибровка завершена"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Калибровка завершена"
      #Начальная калибровка выполнена
      - if:
          condition:
            #Условие: калибровка выполнена
            - lambda: 'return id(idCalibrationCompleted).state == true;'
          then:
            - if:
                condition:
                  #Условие: Ионизатор включен, питомца в лотке нет
                  - lambda: 'return id(idIonizer).state == true and id(idPetInside).state == false and id(idCleaning).state == false;'
                then:
                  #Условие: Уборка завершена
                  - if:
                      condition:
                        - lambda: 'return id(idCleaningLastSeen) == true;'                  
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Уборка закончена"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Уборка закончена"
                        #Действие: Задержка
                        - delay: 10s
                        #Действие: Публикуем в текстовый сенсор статус "Устранение запаха"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Устранение запаха"
                  #Условие: Уборка закончена
                  - if:
                      condition:
                        #Условие: Уборка не выполнялась по прошествии интервала
                        - lambda: 'return id(idCleaningLastSeen) == false;'
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Устранение запаха"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Устранение запаха"

    #Выполняем действия при выключении ионизатора
    on_turn_off:
      #Действие: Отправляем в глобальную переменную "Ионизатор. Последнее состояние" статус true
      - globals.set:
          id: idIonizerLastSeen
          value: 'true'
      #Действие: Задержка          
      - delay: 2s
      - if:
          condition:
            #Условие: Если начальная калибровка выполнена, питомец вышел, уборка закончена, ионизатор выключен 30 сек назад
            - lambda: 'return id(idCalibrationCompleted).state == true and id(idPetInside).state == false and id(idCleaning).state == false and id(idIonizer).state == false and id(idIonizerLastSeen) == true;'
          then:
            #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
            - text_sensor.template.publish:
                id: idStatus
                state: "Лоток чистый"
      #Действие: Задержка
      - delay: 30s
      #Действие: Отправляем в глобальную переменную "Уборка. Ионизатор. Последнее состояние" статус false
      - globals.set:
          id: idIonizerLastSeen
          value: 'false'

#Авто устранение запаха
  - platform: "tuya"
    name: "Auto Odor Purification"
    icon: mdi:creation-outline
    id: idAutoOdorPurification
    switch_datapoint: 126

#Удалить наполнитель
  - platform: "tuya"
    name: "Remove Filler"
    icon: mdi:trash-can-outline
    id: idRemoveFiller
    switch_datapoint: 102

#Стартовая калибровка лотка после подачи питания или перезагрузки ESP
  - platform: template
    name: "CalibrationCompleted"
    icon: mdi:scale-balance
    id: idCalibrationCompleted
    optimistic: true
    restore_mode: ALWAYS_OFF
    internal: false #Скрыть - true \показать - false

#Уборка по расписанию
  - platform: template
    name: "Scheduled Cleaning"
    id: idScheduledCleaning
    icon: mdi:clock-time-five-outline
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    #При включении "Уборка по расписанию" выключаем Автоуборку и Моя автоуборка
    on_turn_on:
      - switch.turn_off: idAutoCleaning
      - switch.turn_off: idMyAutoCleaning

#####################################################################################
################################## Сенсор ###########################################
sensor:
#Уровень сигнала WiFi
  - platform: wifi_signal
    name: "RSSI WiFi"
    icon: mdi:wifi
    update_interval: 60s

#Вес питомца
  - platform: "tuya"
    name: "Cat Weight"
    icon: mdi:scale
    id: idCatWeight
    unit_of_measurement: g
    sensor_datapoint: 6

#Длительность посещения в секундах. Скрытый сенсор
  - platform: "tuya"
    name: "Visit Time Second"
    icon: mdi:clock-outline
    id: idVisitTimeSecond
    unit_of_measurement: min
    sensor_datapoint: 8
    internal: true #Скрыть - true \показать - false
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: idVisitTime
            state: !lambda |-
              int seconds = round(id(idVisitTimeSecond).raw_state);
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (String(minutes) + "m " + String(seconds) + "s")
              ).c_str();

#Время безотказной работы
  - platform: uptime
    name: "Uptime"
    id: idUptime
    icon: mdi:clock-start
    entity_category: diagnostic
    update_interval: 60s
    on_value:
      - if:
          condition:
            #Условие: Калибровка не выполнена, время после старта между 120 и 180 секунд
            - lambda: 'return id(idCalibrationCompleted).state == false and id(idUptime).state > 120 and id(idUptime).state < 180;'
          then:
            - if:
                condition:
                  #Условие: Повторная проверка если калибровка не выполнена
                  - lambda: 'return id(idCalibrationCompleted).state == false;'
                then:
                    #Действие: Калибровка выполнена
                  - switch.turn_on: idCalibrationCompleted
                  #Действие: Публикуем в текстовый сенсор статус "Калибровка завершена"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Калибровка завершена"
                  #Действие: Задержка
                  - delay: 10s
                  #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Лоток чистый"

#####################################################################################
################################### Текстовый сенсор ################################
text_sensor:
#Сенсор IP
  - platform: wifi_info
    ip_address:
      name: IP
      icon: mdi:ip-network

#ESPHome Version
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

#Время
  - platform: template
    name: "Time"
    icon: mdi:clock-digital
    id: idTime
    update_interval: 10s
    lambda: |-
      auto time_text = id(homeassistant_time).now().strftime("%H:%M:%S / %d-%m-%Y");
      return { time_text };    

#Статусы
  - platform: template
    name: "Status"
    id: idStatus
    icon: mdi:information-slab-circle-outline

#Длительность посещения в минутах и секундах
  - platform: template
    name: "Visit Time"
    icon: mdi:clock-outline
    id: idVisitTime

#####################################################################################
################################## Бинарный сенсор ##################################
binary_sensor:
#Мусорный бак
  - platform: "tuya"
    name: "Trash Can"
    icon: mdi:trash-can-outline
    id: idTrashCan
    sensor_datapoint: 119

#Уборка. Данный сенсор отображает статусы ON/OFF в том случае, если работает автоуборка, а при ручной уборке, эти статусы не работают.
#Поэтому я добавил в выключатель ручной уборки idManualCleaning публикацию статусов в скрытый шаблонный бинарный сенсор idBinSensorCleaning и благодаря этому для ручной уборки тоже будут статусы ON/OFF
  - platform: "tuya"
    name: "Cleaning"
    icon: mdi:broom
    id: idCleaning
    sensor_datapoint: 121
    on_state:
      #Уборка запущена
      - if:
          condition:
            #Условие: Уборка запущена
            - lambda: 'return id(idCleaning).state == true;'
          then:
            #Действие: Отправляем в глобальную переменную "Уборка. Последнее состояние" статус true
            - globals.set:
                id: idCleaningLastSeen
                value: 'true'
            #Действие: Публикуем в текстовый сенсор статус "Уборка запущена"
            - text_sensor.template.publish:
                id: idStatus
                state: "Уборка запущена"
      #Уборка закончена 
      - if:
          condition:
            #Условие: Уборка закончена 
            - lambda: 'return id(idCleaning).state == false;'
          then:
            #Действие: Задержка
            - delay: 30s
            #Действие: Отправляем в глобальную переменную "Уборка. Последнее состояние" статус false
            - globals.set:
                id: idCleaningLastSeen
                value: 'false'
            #Действие: Задержка
            - delay: 10s
            #Дополнительное условие
            - if:
                condition:
                  #Условие: Ионизатор выключен
                  - lambda: 'return id(idIonizer).state == false;'
                then:
                  #Действие: Публикуем в текстовый сенсор статус "Уборка закончена"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Уборка закончена"
                  #Действие: Задержка
                  - delay: 10s
                  #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Лоток чистый"

#Дополнительный шаблонный бинарный сенсор для публикации статуса в сенсор idCleaning
  - platform: template
    name: "Cleaning"
    icon: mdi:broom
    id: idBinSensorCleaning
    internal: true #Скрыть - true \показать - false

#Питомец в лотке
  - platform: "tuya"
    name: "Pet Inside"
    icon: mdi:scale-unbalanced
    id: idPetInside
    sensor_datapoint: 104
    on_state:
      then:
      #Питомец в лотке
      - if:
          condition:
            #Условие: Питомец вошел в лоток, калибровка выполнена
            - lambda: 'return id(idPetInside).state == true and id(idCalibrationCompleted).state == true;'
          then:
            #Уборка не запущена
            - if:
                condition:
                  #Условие: Уборка не запущена, питомец не заходил в лоток
                  - lambda: 'return id(idCleaning).state == false and id(idPetInsideLastSeen) == false;'
                then:
                  #Действие: Публикуем в текстовый сенсор статус "Питомец в лотке"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Питомец в лотке"
                  #Действие: Отправляем в глобальную переменную "Питомец в лотке. Последнее состояние" статус true
                  - globals.set:
                      id: idPetInsideLastSeen
                      value: 'true'
                  #Дополнительное условие. Ионизатор
                  - if:
                      condition:
                        #Условие: Ионизатор выключен
                        - lambda: 'return id(idIonizer).state == false;'
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Питомец в лотке"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Питомец в лотке"
                  - if:
                      condition:
                        #Условие: Ионизатор включен
                        - lambda: 'return id(idIonizer).state == true;'
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Питомец в лотке"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Питомец в лотке. Работает ионизатор"
            #Уборка запущена
            - if:
                condition:
                  #Условие: Уборка запущена
                  - lambda: 'return id(idCleaning).state == true;'
                then:
                  #Действие: Публикуем в текстовый сенсор статус "Питомец в лотке. Уборка приостановлена"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Питомец в лотке. Уборка приостановлена"

      #Питомец вышел
      - if:
          condition:
            #Условие: Питомец вышел из лотка, калибровка выполнена  
            - lambda: 'return id(idPetInside).state == false and id(idCalibrationCompleted).state == true;'
          then:
            #Уборка не запущена
            - if:
                condition:
                  #Условие: Уборка не запущена, питомец был в лотке, ионизатор выключен 
                  - lambda: 'return id(idCleaning).state == false and id(idPetInsideLastSeen) == true and id(idIonizer).state == false;'
                then:
                  #Действие: Публикуем в текстовый сенсор статус "Питомец вышел"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Питомец вышел"
                  #Запускаем ручную уборку при условии...
                  - if:
                      condition:
                          #Условие: Включена MyAutoCleaning, уборка еще не запущена(запустится таймер "Задержка запуска уборки", а после будет запущена уборка), вес питомца больше минимального веса
                        - lambda: 'return id(idMyAutoCleaning).state == true and id(idCleaningLastTimeGlobal) == false and id(idCatWeight).state >= id(idMinimumPetWeight).state;'
                      then:
                        #Действие: Задержка для запуска уборки вручную
                        - delay: !lambda "return id(idLaunchDelay).state*60000;"
                        - if:
                            condition:
                                #Условие: Дополнительная проверка. Если по прошествии задержки условия верны, то запустить уборку
                              - lambda: 'return id(idMyAutoCleaning).state == true and id(idCleaningLastTimeGlobal) == false and id(idCatWeight).state >= id(idMinimumPetWeight).state;' 
                            then:
                              #Действие: Включить выключатель "Уборка вручную
                              - switch.turn_on: idManualCleaning
                  #Действие: Задержка
                  - delay: 10s
                  #Действие: Отправляем в глобальную переменную "Уборка. Последнее состояние" статус false
                  - globals.set:
                      id: idPetInsideLastSeen
                      value: 'false'
                  #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Лоток чистый"
            #Уборка запущена
            - if:
                condition:
                  #Условие: Уборка запущена, ионизатор выключен
                  - lambda: 'return id(idCleaning).state == true and id(idIonizer).state == false;'
                then:
                  #Действие: Публикуем в текстовый сенсор статус "Уборка запущена"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Уборка запущена"


#####################################################################################
####################################### Число #######################################
number:
#Калибровка бака c отходами
  - platform: "tuya"
    name: "Calibration Of The Waste Tank"
    icon: mdi:delete-variant
    id: idCalibrationOfTheWasteTank
    number_datapoint: 124
    min_value: 0
    max_value: 15
    step: 1
    mode: box #slider/box

#Калибровка наполнителя
  - platform: "tuya"
    name: "Calibration Of Filler"
    icon: mdi:basket-unfill
    id: idCalibrationOfFiller
    number_datapoint: 125
    min_value: 0
    max_value: 6
    step: 1
    mode: box #slider/box

#Задержка запуска
  - platform: "tuya"
    name: "Launch delay"
    icon: mdi:timer-play-outline
    id: idLaunchDelay
    number_datapoint: 117
    min_value: 0
    max_value: 60
    step: 1
    mode: box #slider/box

#Интервал между уборками
  - platform: "tuya"
    name: "Interval Between Cleaning"
    icon: mdi:clock-time-eight-outline
    id: idIntervalBetweenCleaning
    number_datapoint: 118
    min_value: 0
    max_value: 120
    step: 1
    mode: box #slider/box

#Чувствительность обнаружения
  - platform: "tuya"
    name: "Detection Sensitivity"
    icon: mdi:signal-variant
    id: idDetectionSensitivity
    number_datapoint: 127
    min_value: 0
    max_value: 3000
    step: 1
    mode: box #slider/box

#Минимальный вес питомца
  - platform: template
    name: "Minimum Pet Weight"
    icon: mdi:weight-gram
    id: idMinimumPetWeight
    min_value: 0
    max_value: 5000
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

#План уборки. Указываем время уборки, если не нужно делать уборку, то указываем 0
  - platform: template
    name: "Cleaning Time 01"
    icon: mdi:clock-start
    id: idCleaningTime1
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 02"
    icon: mdi:clock-start
    id: idCleaningTime2
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 03"
    icon: mdi:clock-start
    id: idCleaningTime3
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 04"
    icon: mdi:clock-start
    id: idCleaningTime4
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 05"
    icon: mdi:clock-start
    id: idCleaningTime5
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 06"
    icon: mdi:clock-start
    id: idCleaningTime6
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 07"
    icon: mdi:clock-start
    id: idCleaningTime7
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 08"
    icon: mdi:clock-start
    id: idCleaningTime8
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 09"
    icon: mdi:clock-start
    id: idCleaningTime9
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 10"
    icon: mdi:clock-start
    id: idCleaningTime10
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 11"
    icon: mdi:clock-start
    id: idCleaningTime11
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

  - platform: template
    name: "Cleaning Time 12"
    icon: mdi:clock-start
    id: idCleaningTime12
    min_value: 0
    max_value: 2359
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true


#####################################################################################
################################## Скрипт ###########################################
script:
#Стартовый скрипт. Скрипт запускается после загрузки. Работает, если выключена автоуборка
#Настройки по умолчанию после загрузки при условии, что если чувствительность обнаружения не равно 1000
  - id: idStartingScript
    then:
      #Действие: Публикуем в текстовый сенсор статус "Запущена калибровка"
      - text_sensor.template.publish:
          id: idStatus
          state: "Запущена калибровка"
      #Действие: Выключаем выключатель "Калибровка не выполнена"
      - switch.turn_off: idCalibrationCompleted
      #Действие: Задержка
      - delay: 60s 
      #Если чувствительность обнаружения не равно 1000, то выставляем настройки по умолчанию
      - if:
          condition:
            #Условие: Автоуборка выключена, чувствительность обнаружения не равно 1000
            - lambda: 'return id(idAutoCleaning).state == false and id(idDetectionSensitivity).state != 1000;'
          then:
            #Действие: Чувствительность обнаружения
            - number.set:
                id: idDetectionSensitivity
                value: 1000
            #Действие: Задержка запуска
            - number.set:
                id: idLaunchDelay
                value: 5
            #Действие: Интервал между уборками
            - number.set:
                id: idIntervalBetweenCleaning
                value: 15

#После подачи питания на лоток или перезагрузки ESP лоток начинает вращать барабан, делая калибровку, а после готов к работе
  - id: idCalibrationStartedScript
    then:
      - if:
          condition:
            #Условие: Калибровка не выполнена
            - lambda: 'return id(idCalibrationCompleted).state == false;'
          then:
            - if:
                condition:
                  #Условие: Время после старта до 180 секунд
                  - lambda: 'return id(idUptime).state < 180;'
                then:
                  #Действие: Включаем выключатель "Калибровка выполнена"
                  - switch.turn_on: idCalibrationCompleted
                  #Действие: Публикуем в текстовый сенсор статус "Калибровка завершена"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Калибровка завершена"
                  #Действие: Задержка
                  - delay: 10s
                  #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Лоток чистый"
            - if:
                condition:
                  #Условие: Время после старта между 120 и 180 секунд
                  - lambda: 'return id(idUptime).state > 120 and id(idUptime).state < 180;'
                then:
                  #Действие: Включаем выключатель "Калибровка выполнена"
                  - switch.turn_on: idCalibrationCompleted
                  #Действие: Публикуем в текстовый сенсор статус "Калибровка завершена"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Калибровка завершена"
                  #Действие: Задержка
                  - delay: 10s
                  #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Лоток чистый"

#Если включаем My AutoCleaning, то сперва сохраняются настройки для AutoCleaning в глобальные переменные, а после будут восстановлены настройки для My AutoCleaning
  - id: idSettingsForMyAutoCleaning
    then:
      #Действие: Сохраняем текущие настройки в глобальные переменные для AutoCleaning
      - globals.set:
          id: idLaunchDelayGlobal
          value: !lambda 'return id(idLaunchDelay).state;'
      - globals.set:
          id: idIntervalBetweenCleaningGlobal
          value: !lambda 'return id(idIntervalBetweenCleaning).state;'
      - globals.set:
          id: idDetectionSensitivityGlobal
          value: !lambda 'return id(idDetectionSensitivity).state;'
      - delay: 2s
      #Действие: Восстанавливаем настройки из глобальных переменных для My AutoCleaning
      - number.set:
          id: idLaunchDelay
          value: !lambda 'return id(idMyLaunchDelayGlobal);'
      - number.set:
          id: idIntervalBetweenCleaning
          value: !lambda 'return id(idMyIntervalBetweenCleaningGlobal);'
      - number.set:
          id: idDetectionSensitivity
          value: !lambda 'return id(idMyDetectionSensitivityGlobal);'

#Если выключаем My AutoCleaning, то сперва сохраняются настройки для My AutoCleaning в глобальные переменные, а после будут восстановлены настройки для AutoCleaning
  - id: idSettingsForAutoCleaning
    then:
      #Действие: Сохраняем текущие настройки в глобальные переменные для My AutoCleaning
      - globals.set:
          id: idMyLaunchDelayGlobal
          value: !lambda 'return id(idLaunchDelay).state;'
      - globals.set:
          id: idMyIntervalBetweenCleaningGlobal
          value: !lambda 'return id(idIntervalBetweenCleaning).state;'
      - globals.set:
          id: idMyDetectionSensitivityGlobal
          value: !lambda 'return id(idDetectionSensitivity).state;'
      - delay: 2s
      #Действие: Восстанавливаем настройки из глобальных переменных для AutoCleaning
      - number.set:
          id: idLaunchDelay
          value: !lambda 'return id(idLaunchDelayGlobal);'
      - number.set:
          id: idIntervalBetweenCleaning
          value: !lambda 'return id(idIntervalBetweenCleaningGlobal);'
      - number.set:
          id: idDetectionSensitivity
          value: !lambda 'return id(idDetectionSensitivityGlobal);'


#Если включить моя автоуборка 
  - id: idMySettingScript
    then:
      #Действие: Задержка
      - delay: 10s 
      #Условие: Если чувствительность обнаружения не равно 1000, то выставляем настройки по умолчанию
      - if:
          condition:
            - lambda: 'return id(idDetectionSensitivity).state != 1000;'
          then:
            #Действие: Чувствительность обнаружения
            - number.set:
                id: idDetectionSensitivity
                value: 1000
            #Действие: Задержка запуска
            - number.set:
                id: idLaunchDelay
                value: 5
            #Действие: Интервал между уборками
            - number.set:
                id: idIntervalBetweenCleaning
                value: 15

#Уборка по расписанию
  - id: idScheduledCleaningScript
    then:
      - if:
          condition:
            #Условие: Уборка по расписанию
            - lambda: 'return id(idScheduledCleaning).state == true;'
          then:
            - if:
                condition:
                  #Условие: Увтоуборка выключена, моя автоуборка выключена, уборка вручную выключена
                  - lambda: 'return id(idAutoCleaning).state == false and id(idMyAutoCleaning).state == false and id(idManualCleaning).state == false;'
                then:
                  #Включаем выключаетль "Уборка вручную"
                  - switch.turn_on: idManualCleaning



#####################################################################################
####################################### Кнопка ######################################
button:
#Перезагрузка
  - platform: restart
    name: "Restart"
    icon: mdi:restart

#####################################################################################
####################################### Время #######################################
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        then:
          - lambda: |-
              //Выходим, ничего не делая, если wifi не подключен
              if (!id(idWiFi).is_connected()) {
                ESP_LOGD("on_time", "Wifi not connected! Do nothing.");
                return;
              }
              //Выходим, ничего не делая, если часы сбиты (не валидны)
              auto current_time = id(homeassistant_time).now();
              if (!current_time.is_valid()) {
                ESP_LOGD("on_time", "Invalid time! Do nothing.");
                return;
              }
              //Выходим, ничего не делая, если кормежка по расписанию не включена
              if (!id(idScheduledCleaning).state) {
                ESP_LOGD("on_time", "ScheduledCleaning if Off! Do nothing.");
                return;
              }
 
              //Получаем часы, минуты текущего времени
              int current_hours = current_time.hour;
              int current_minutes = current_time.minute;
              ESP_LOGD("on_time", "Current time: %02d:%02d", current_hours, current_minutes);
              
              //В цикле перебираем все расписания
              template_::TemplateNumber *cleaning_times[] = {
                id(idCleaningTime1),
                id(idCleaningTime2),
                id(idCleaningTime3),
                id(idCleaningTime4),
                id(idCleaningTime5),
                id(idCleaningTime6),
                id(idCleaningTime7),
                id(idCleaningTime8),
                id(idCleaningTime9),
                id(idCleaningTime10),
                id(idCleaningTime11),
                id(idCleaningTime12)
                };
              for (int i = 0; i < sizeof(cleaning_times) / sizeof(*cleaning_times); i++) {
                //Пропускаем расписания со значением "0"
                if (cleaning_times[i]->state == 0) continue;
 
                //Получаем часы, минуты уборки по расписанию
                int cleaning_hours = (int) (cleaning_times[i]->state) / 100;
                int cleaning_minutes = (int) (cleaning_times[i]->state) % 100;

                //Считаем разницу в минутах между текущим временем и расписанием
                int diff_time = ((cleaning_hours > current_hours ? current_hours + 24 : current_hours) * 60 + current_minutes) - (cleaning_hours * 60 + cleaning_minutes);
 
                //Если раница нулевая (diff_time равно 0) - значит наступило время уборки по расписанию
                //Если разница больше 0 и меньше константы max_skipped_time - проверяем, не нужно ли запустить отложенную уборку (разница текущего времени и глобалки idLastCleaningTimes должна быть хотя бы "max_skipped_time" минут)
                if (diff_time == 0 or (diff_time > 0 and diff_time < ${max_skipped_time} and (current_time.timestamp - id(idLastCleaningTimes)) / 60 > ${max_skipped_time})) {
                  ESP_LOGI("on_time", "%s time to turn on with '%s'", diff_time == 0 ? "Exact" : "Skipped", cleaning_times[i]->get_name().c_str());

                  //Запускаем скрипт "Уборка по расписанию"
                  id(idScheduledCleaningScript).execute();

                  //Запоминаем в память время последней запущенной уборки и прерываем цикл
                  id(idLastCleaningTimes) = current_time.timestamp;
                  
                  //Прерываем выполнение цикла
                  break;
                }
              }


