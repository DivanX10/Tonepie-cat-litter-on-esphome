#В конфигурации используется
#Автоуборка
#Уборка вручную
#Моя автоуборка. Выключает автоуборку и работает со своей логикой. Если вес питомца выше указаного, то запускается уборка вручную. В автоуборке это не реализовано, поэтому я не использую автоуборку
#Статусы

#####################################################################################
##################################### Переменные ####################################
substitutions:
  board_name: ESP Cat Litter Tonepie
  node_name: cat litter tonepie

#####################################################################################
################################ Основная конфигурация ##############################
esphome:
  name: cat-litter-tonepie
  friendly_name: cat-litter-tonepie
  comment: ESP Cat Litter Tonepie
  on_boot:
    priority: -100.0
    then:
      - script.execute: idStartingScript

#####################################################################################
###################################### Платформа ####################################
esp8266:
  board: esp12e
  framework:
    version: recommended
  restore_from_flash: true #Сохраняем предустановленные настройки. После перезагрузки настройки не сбрасываются

#Сброс данных на флэш-накопитель для уменьшения износа флеш-накопителя
preferences:
  flash_write_interval: 1min

#####################################################################################
################################ Wi-Fi и точка доступа ##############################
#Учетные данные Wi-Fi для подключения платы к домашней сети
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: off
  reboot_timeout: 5min

#Если не будет связи с WiFi, то поднимется точка доступа
  ap:
    ssid: ESP Cat Litter Tonepie
    password: !secret ap_esp_password
    ap_timeout: 1 min
    manual_ip:
      static_ip: 192.168.4.1
      gateway: 192.168.4.1
      subnet: 255.255.255.0

#Компонент mdns заставляет узел объявлять о себе в локальной сети, используя протокол многоадресной рассылки DNS (mDNS), по умолчанию для mDNS disabled: false
mdns:
  disabled: false

#Компонент captive portal в ESPHome является резервным механизмом на случай сбоя подключения к настроенному Wi-Fi
captive_portal:

#Веб сервер
web_server:
  port: 80

#Журналирование
logger:
  level: ERROR
  baud_rate: 0

#Enable Home Assistant API
api:

#Обновление по воздуху (OTA)
ota:
  password: "esphome"

#####################################################################################
######################################### UART ######################################
uart:
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600
  stop_bits: 1
  data_bits: 8
  parity: none
#  debug:
#    direction: BOTH
#    dummy_receiver: false

#Включить компонент Tuya MCU
tuya:

#####################################################################################
########################### Глобальные переменные ###################################
globals:
#Была ли уборка MyAutoCleaning?
  - id: idCleaningLastTimeGlobal
    type: bool
    restore_value: yes
    initial_value: 'false'

#Уборка. Последнее состояние
  - id: idCleaningLastSeen
    type: bool
    restore_value: yes
    initial_value: 'false'

#####################################################################################
################################## Выключатель ######################################
switch:
#Уборка вручную
  - platform: "tuya"
    name: "Manual Cleaning"
    icon: mdi:broom
    id: idManualCleaning
    switch_datapoint: 101
    on_turn_on:
      #Публикуем статус уборки
      - binary_sensor.template.publish:
          id: idCleaning
          state: ON  
    on_turn_off:
      #Публикуем статус уборки
      - binary_sensor.template.publish:
          id: idCleaning
          state: OFF
      #Если была выполнена уборка вручную, то отправляем в глобальную переменную для "Была ли уборка MyAutoCleaning?" статус true
      - globals.set:
          id: idCleaningLastTimeGlobal
          value: 'true'
      #Задержка для интервала между уборками
      - delay: !lambda "return id(idIntervalBetweenCleaning).state*60000;"
      #После задержки отправляем в глобальную переменную для "Была ли уборка MyAutoCleaning?" статус false. Таким образом, если питомец зайдет и выйдет, то запустится следующая уборка
      - globals.set:
         id: idCleaningLastTimeGlobal
         value: 'false'

#Автоуборка. Встроенная логика работы. 
#Мне не нравится как работает встроенная логика работы автоуборки, поэтому я указал выключать ее по умолчанию. По умолчанию будет выключено при загрузке. 
#Если надо, чтобы всегда включалась автоуборка, то нужно убрать строку restore_mode: ALWAYS_OFF
#Если включаем AutoCleaning, то выключается My AutoCleaning
  - platform: "tuya"
    name: "AutoCleaning"
    icon: mdi:auto-mode
    id: idAutoCleaning
    switch_datapoint: 105
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - switch.turn_off: idMyAutoCleaning
      #Выполняем действия если калибровка выключена
      - if:
          condition:
            #Условие: Калибровка не выполнена, время работы меньше 1 минуты
            - lambda: 'return id(idCalibrationCompleted).state == false and id(idUptime).state < 300;'
          then:
            #Действие: Включаем выключатель "Калибровка завершена"
            - switch.turn_on: idCalibrationCompleted

#Автоуборка. Своя логика работы автоуборки
#Если включаем My AutoCleaning, то выключается AutoCleaning
  - platform: template
    name: "My AutoCleaning"
    icon: mdi:broom
    id: idMyAutoCleaning
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - switch.turn_off: idAutoCleaning

#Инфракрасный датчик
  - platform: "tuya"
    name: "Infrared Sensor"
    icon: mdi:eye-outline
    id: idInfraredSensor
    switch_datapoint: 111
    restore_mode: ALWAYS_OFF

#Защита от детей
  - platform: "tuya"
    name: "Protection From Children"
    icon: mdi:lock-check-outline
    id: idProtectionFromChildren
    switch_datapoint: 114

#Ионизатор
  - platform: "tuya"
    name: "Ionizer"
    icon: mdi:creation
    id: idIonizer
    switch_datapoint: 120
    #Если перезагрузить лоток по питанию, то запустится процесс калибровки, а после окончания калибровки включается ионизатор. Это можно использовать как событие, что калибровка завершена
    #Если перезагрузить ESP, то это условие не подойдет. Лоток делает калибровку, но не включает ионизатор после выполнения калибровки
    #Выполняем действия при включении ионизатора
    on_turn_on:
      #Выполняем действия после калибровки. Калибровка выполнена
      - if:
          condition:
            #Условие: калибровка выполнена
            - lambda: 'return id(idCalibrationCompleted).state == true;'
          then:
            - if:
                condition:
                  #Условие: Ионизатор включен, питомца в лотке нет, уборка выключена
                  - lambda: 'return id(idIonizer).state == true and id(idPetInside).state == false and id(idCleaning).state == false;'
                then:
                  #Действие: Задержка
                  - delay: 10s
                  #Действие: Публикуем в текстовый сенсор статус
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Устранение запаха"
            - if:
                condition:
                  #Условие: Ионизатор включен, питомец в лотке, уборка выключена
                  - lambda: 'return id(idIonizer).state == true and id(idPetInside).state == true and id(idCleaning).state == false;'
                then:
                  #Действие: Задержка
                  - delay: 10s
                  #Действие: Публикуем в текстовый сенсор статус "Питомец в лотке"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Питомец в лотке. Работает ионизатор"

    #Выполняем действия при выключении ионизатора
    on_turn_off:
      #Выполняем действия после калибровки. Калибровка выполнена
      - if:
          condition:
            #Условие: калибровка выполнена
            - lambda: 'return id(idCalibrationCompleted).state == true;'
          then:
            - if:
                condition:
                  #Условие: Ионизатор выключен, питомца в лотке нет, уборка выключена
                  - lambda: 'return id(idIonizer).state == false and id(idPetInside).state == false and id(idCleaning).state == false;'
                then:
                  #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Лоток чистый"
            - if:
                condition:
                  #Условие: Ионизатор выключен, питомец в лотке, уборка выключена
                  - lambda: 'return id(idIonizer).state == false and id(idPetInside).state == true and id(idCleaning).state == false;'
                then:
                  #Действие: Публикуем в текстовый сенсор статус "Питомец в лотке"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Питомец в лотке"

#Авто устранение запаха
  - platform: "tuya"
    name: "Auto Odor Purification"
    icon: mdi:creation-outline
    id: idAutoOdorPurification
    switch_datapoint: 126

#Удалить наполнитель
  - platform: "tuya"
    name: "Remove Filler"
    icon: mdi:trash-can-outline
    id: idRemoveFiller
    switch_datapoint: 102

#Стартовая калибровка лотка после подачи питания или перезагрузки ESP
  - platform: template
    name: "Calibration Completed"
    icon: mdi:scale-balance
    id: idCalibrationCompleted
    optimistic: true
    restore_mode: ALWAYS_OFF
    internal: false #Скрыть - true \показать - false
    on_turn_on:
      - script.execute: idMySettingScript
      #Действие: Публикуем в текстовый сенсор статус "Калибровка завершена"
      - text_sensor.template.publish:
          id: idStatus
          state: "Калибровка завершена"
      #Действие: Задержка
      - delay: 10s
      #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
      - text_sensor.template.publish:
          id: idStatus
          state: "Лоток чистый"

#####################################################################################
################################## Сенсор ###########################################
sensor:
#Уровень сигнала WiFi
  - platform: wifi_signal
    name: "RSSI WiFi"
    icon: mdi:wifi
    update_interval: 60s

#Вес питомца
  - platform: "tuya"
    name: "Cat Weight"
    icon: mdi:scale
    id: idCatWeight
    unit_of_measurement: g
    sensor_datapoint: 6

#Длительность посещения в секундах. Скрытый сенсор
  - platform: "tuya"
    name: "Visit Time Second"
    icon: mdi:clock-outline
    id: idVisitTimeSecond
    unit_of_measurement: min
    sensor_datapoint: 8
    internal: true #Скрыть - true \показать - false
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: idVisitTime
            state: !lambda |-
              int seconds = round(id(idVisitTimeSecond).raw_state);
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (String(minutes) + "m " + String(seconds) + "s")
              ).c_str();

#Время безотказной работы
  - platform: uptime
    name: "Uptime"
    id: idUptime
    icon: mdi:clock-start
    entity_category: diagnostic
    update_interval: 10s
    on_value:
      - if:
          condition:
            #Условие: Калибровка не выполнена между 240 и 600 секунд
            - lambda: 'return id(idCalibrationCompleted).state == false and id(idUptime).state > 240 and id(idUptime).state < 600;'
          then:
            #Действие: Включаем выключатель "Калибровка выполнена"
            - switch.turn_on: idCalibrationCompleted

#Cвободная память
  - platform: template
    name: "Free Mem Size"
    icon: mdi:memory
    entity_category: diagnostic
    lambda: |-
      #ifdef MALLOC_CAP_DEFAULT
         size_t freeValue = heap_caps_get_free_size(MALLOC_CAP_DEFAULT);
      #else
         size_t freeValue = ESP.getFreeHeap();
      #endif
      return freeValue;

#####################################################################################
################################### Текстовый сенсор ################################
text_sensor:
#Сенсор IP
  - platform: wifi_info
    ip_address:
      name: IP
      icon: mdi:ip-network

#ESPHome Version
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

#Время
  - platform: template
    name: "Time"
    icon: mdi:clock-digital
    id: idTime
    update_interval: 10s
    lambda: |-
      auto time_text = id(homeassistant_time).now().strftime("%H:%M:%S / %d-%m-%Y");
      return { time_text };

#Статусы
  - platform: template
    name: "Status"
    id: idStatus
    icon: mdi:information-slab-circle-outline

#Длительность посещения в минутах и секундах
  - platform: template
    name: "Visit Time"
    icon: mdi:clock-outline
    id: idVisitTime

#####################################################################################
################################## Бинарный сенсор ##################################
binary_sensor:
#Мусорный бак
  - platform: "tuya"
    name: "Trash Can"
    icon: mdi:trash-can-outline
    id: idTrashCan
    sensor_datapoint: 119

#Дополнительный шаблонный бинарный сенсор для публикации статуса в сенсор idCleaning
  - platform: template
    name: "Cleaning"
    icon: mdi:broom
    id: idBinSensorCleaning
    internal: true #Скрыть - true \показать - false

#Уборка. Данный сенсор отображает статусы ON/OFF в том случае, если работает автоуборка, а при ручной уборке, эти статусы не работают.
#Поэтому я добавил в выключатель ручной уборки idManualCleaning публикацию статусов в скрытый шаблонный бинарный сенсор idBinSensorCleaning и благодаря этому для ручной уборки тоже будут статусы ON/OFF
  - platform: "tuya"
    name: "Cleaning"
    icon: mdi:broom
    id: idCleaning
    sensor_datapoint: 121
    on_state:
      then:
      - if:
          condition:
            #Выполняем действия если калибровка выполнена 
            - lambda: 'return id(idCalibrationCompleted).state == true;'
          then:
            #Выполняем действия если уборка запущена
            - if:
                condition:
                  #Условие: Уборка запущена
                  - lambda: 'return id(idCleaning).state == true;'
                then:
                  #Действие: Отправляем в глобальную переменную "Уборка. Последнее состояние" статус true
                  - globals.set:
                      id: idCleaningLastSeen
                      value: 'true'
                  #Действие: Публикуем в текстовый сенсор статус "Уборка запущена"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Уборка запущена"
            #Выполняем действия если уборка завершена
            - if:
                condition:
                  #Условие: Уборка завершена
                  - lambda: 'return id(idCleaning).state == false and id(idUptime).state > 60;'
                then:
                  #Скрипт "Уборка закончена" имеет задержки и чтобы повторно запустить скрипт, необходимо сначала остановить скрипт, а после повторно запустить
                  #Действие: Остановка скрипта "Уборка закончена"
                  - script.stop: idCleaningFinishedScript
                  #Действие: Запуск скрипта "Уборка закончена"
                  - script.execute: idCleaningFinishedScript

#Питомец в лотке
  - platform: "tuya"
    name: "Pet Inside"
    icon: mdi:scale-unbalanced
    id: idPetInside
    sensor_datapoint: 104
    on_state:
      then:
      - if:
          condition:
            #Выполняем действия если калибровка выполнена 
            - lambda: 'return id(idCalibrationCompleted).state == true;'
          then:
            #Выполняем действия если питомец в лотке
            - if:
                condition:
                  #Условие: Питомец в лотке
                  - lambda: 'return id(idPetInside).state == true;'
                then:
                  #Условие: Если ионизатор выключен и уборка не запущена
                  - if:
                      condition:
                        #Условие: Ионизатор выключен, уборка не запущена
                        - lambda: 'return id(idIonizer).state == false and id(idCleaning).state == false;'
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Питомец в лотке"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Питомец в лотке"

                  #Условие: Если ионизатор включен и уборка не запущена
                  - if:
                      condition:
                        #Условие: Ионизатор выключен, уборка не запущена
                        - lambda: 'return id(idIonizer).state == true and id(idCleaning).state == false;'
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Питомец в лотке. Работает ионизатор"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Питомец в лотке. Работает ионизатор"

                  #Условие: Если ионизатор выключен и уборка запущена
                  - if:
                      condition:
                        #Условие: Ионизатор выключен, уборка запущена
                        - lambda: 'return id(idIonizer).state == false and id(idCleaning).state == true;'
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Питомец в лотке. Уборка приостановлена"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Питомец в лотке. Уборка приостановлена"

            #Выполняем действия если питомец вышел
            - if:
                condition:
                  #Условие: Питомец вышел
                  - lambda: 'return id(idPetInside).state == false;'
                then:
                  #Условие: Если ионизатор выключен и уборка не запущена
                  - if:
                      condition:
                        #Условие: Ионизатор выключен, уборка не запущена
                        - lambda: 'return id(idIonizer).state == false and id(idCleaning).state == false;'
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Лоток чистый"

                  #Условие: Если ионизатор включен и уборка не запущена
                  - if:
                      condition:
                        #Условие: Ионизатор выключен, уборка не запущена
                        - lambda: 'return id(idIonizer).state == true and id(idCleaning).state == false;'
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Устранение запаха"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Устранение запаха"

                  #Условие: Если ионизатор выключен и уборка запущена
                  - if:
                      condition:
                        #Условие: Ионизатор выключен, уборка запущена
                        - lambda: 'return id(idIonizer).state == false and id(idCleaning).state == true;'
                      then:
                        #Действие: Публикуем в текстовый сенсор статус "Запущена уборка"
                        - text_sensor.template.publish:
                            id: idStatus
                            state: "Запущена уборка"

                  #Запускаем ручную уборку при условии...
                  - if:
                      condition:
                      #Условие: Уборка выключена, моя автоуборка включена, уборка еще не запущена(запустится таймер "Задержка запуска уборки", а после будет запущена уборка), вес питомца больше минимального веса
                        - lambda: 'return id(idCleaning).state == false and id(idMyAutoCleaning).state == true and id(idCleaningLastTimeGlobal) == false and id(idCatWeight).state >= id(idMinimumPetWeight).state;'
                      then:
                      #Действие: Задержка для запуска уборки вручную
                        - delay: !lambda "return id(idLaunchDelay).state*60000;"
                        - if:
                            condition:
                              #Условие: Дополнительная проверка. Если по прошествии задержки условия верны, то запустить уборку
                              - lambda: 'return id(idCleaning).state == false and id(idMyAutoCleaning).state == true and id(idCleaningLastTimeGlobal) == false and id(idCatWeight).state >= id(idMinimumPetWeight).state;' 
                            then:
                              #Действие: Выключить ионизатор
                              - switch.turn_off: idIonizer
                              #Действие: Включить выключатель "Уборка вручную"
                              - switch.turn_on: idManualCleaning

#####################################################################################
####################################### Число #######################################
number:
#Калибровка бака c отходами
  - platform: "tuya"
    name: "Calibration Of The Waste Tank"
    icon: mdi:delete-variant
    id: idCalibrationOfTheWasteTank
    number_datapoint: 124
    min_value: 0
    max_value: 15
    step: 1
    mode: box #slider/box

#Калибровка наполнителя
  - platform: "tuya"
    name: "Calibration Of Filler"
    icon: mdi:basket-unfill
    id: idCalibrationOfFiller
    number_datapoint: 125
    min_value: 0
    max_value: 6
    step: 1
    mode: box #slider/box

#Задержка запуска
  - platform: "tuya"
    name: "Launch delay"
    icon: mdi:timer-play-outline
    id: idLaunchDelay
    number_datapoint: 117
    min_value: 0
    max_value: 60
    step: 1
    mode: box #slider/box

#Интервал между уборками
  - platform: "tuya"
    name: "Interval Between Cleaning"
    icon: mdi:clock-time-eight-outline
    id: idIntervalBetweenCleaning
    number_datapoint: 118
    min_value: 0
    max_value: 120
    step: 1
    mode: box #slider/box

#Чувствительность обнаружения
  - platform: "tuya"
    name: "Detection Sensitivity"
    icon: mdi:signal-variant
    id: idDetectionSensitivity
    number_datapoint: 127
    min_value: 0
    max_value: 1500
    step: 1
    mode: box #slider/box

#Минимальный вес питомца
  - platform: template
    name: "Minimum Pet Weight"
    icon: mdi:weight-gram
    id: idMinimumPetWeight
    min_value: 0
    max_value: 5000
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true

#####################################################################################
################################## Скрипт ###########################################
script:
#Стартовый скрипт. Скрипт запускается при загрузки. Работает, если калибровка не выполнена
  - id: idStartingScript
    mode: single
    then:
      #Действие: Выключаем выключатель "Калибровка выполнена"
      - switch.turn_off: idCalibrationCompleted
      #Действие: Публикуем в текстовый сенсор статус "Запущена калибровка"
      - text_sensor.template.publish:
          id: idStatus
          state: "Запущена калибровка"

#Настройки по умолчанию после загрузки при условии, если чувствительность обнаружения не равно 1000
  - id: idMySettingScript
    mode: single
    then:
      #Если чувствительность обнаружения не равно 1000, то выставляем настройки по умолчанию
      - if:
          condition:
            #Условие: Чувствительность обнаружения не равно 1000
            - lambda: 'return id(idDetectionSensitivity).state != 1000;'
          then:
            #Действие: Чувствительность обнаружения
            - number.set:
                id: idDetectionSensitivity
                value: 1000
            #Действие: Задержка запуска
            - number.set:
                id: idLaunchDelay
                value: 5
            #Действие: Интервал между уборками
            - number.set:
                id: idIntervalBetweenCleaning
                value: 15

#Уборка закончена
  - id: idCleaningFinishedScript
    mode: single
    then:
      #Уборка закончена 
      - if:
          condition:
            #Условие: Уборка закончена 
            - lambda: 'return id(idCleaning).state == false;'
          then:
            #Действие: Отправляем в глобальную переменную "Уборка. Последнее состояние" статус false
            - globals.set:
                id: idCleaningLastSeen
                value: 'false'
            #Действие: Задержка
            - delay: 30s
            #Дополнительное условие
            - if:
                condition:
                  #Условие: Ионизатор выключен
                  - lambda: 'return id(idIonizer).state == false;'
                then:
                  #Действие: Публикуем в текстовый сенсор статус "Уборка закончена"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Уборка закончена"
                  #Действие: Задержка
                  - delay: 10s
                  #Действие: Публикуем в текстовый сенсор статус "Лоток чистый"
                  - text_sensor.template.publish:
                      id: idStatus
                      state: "Лоток чистый"

#####################################################################################
####################################### Кнопка ######################################
button:
#Перезагрузка
  - platform: restart
    name: "Restart"
    icon: mdi:restart

#####################################################################################
####################################### Время #######################################
time:
  - platform: homeassistant
    id: homeassistant_time


